public class DISCHM92Hash{
  /*
   * To reduce space usage, remove the key list if it is not needed. The
   * list is not needed for hash table operation. If you hash a value
   * which is not in the table (which you shouldn't), the only way to
   * detect the miss is to compare against the corresponding table index.
   */
public static final String[] KEY_LIST = {
"January",
"February",
"March",
"April",
"May",
"June",
"July",
"August",
"September",
"October",
"November",
"December"
};
private static final int[][] TABLE_1 = { 
  
{
13, 18, 21, 22, 6, 23, 16, 20, 11
,23, 18, 20, 10, 24, 8, 23, 22, 17
,10, 5, 14, 17, 18, 23, 16, 5, 21
,6, 8, 8, 10, 11, 11, 15, 24, 22
,18, 1, 13, 4, 8, 8, 13, 4, 23
,12, 7, 11, 23, 7, 13, 13, 21, 0
,6, 3, 14, 9, 2, 6, 13, 8, 19
,11
},
{
19, 24, 6, 11, 4, 0, 20, 14, 19
,4, 18, 9, 20, 23, 8, 0, 12, 23
,24, 12, 6, 24, 9, 3, 24, 16, 10
,15, 20, 0, 3, 19, 5, 21, 5, 2
,4, 0, 23, 21, 21, 17, 1, 15, 9
,18, 3, 5, 18, 8, 3, 21, 22, 1
,18, 14, 14, 21, 4, 13, 4, 20, 12
,8
},
{
23, 23, 2, 0, 11, 14, 6, 20, 20
,9, 18, 17, 18, 12, 21, 10, 10, 24
,3, 22, 15, 20, 11, 7, 21, 10, 23
,2, 11, 24, 16, 8, 12, 11, 19, 12
,5, 11, 24, 11, 15, 7, 4, 21, 6
,14, 9, 19, 3, 17, 14, 20, 22, 15
,20, 6, 10, 24, 4, 21, 15, 6, 8
,11
},
{
15, 12, 1, 3, 22, 2, 19, 2, 8
,9, 11, 2, 6, 20, 20, 10, 19, 16
,0, 1, 16, 15, 24, 5, 2, 20, 10
,5, 24, 12, 20, 8, 14, 13, 6, 8
,23, 18, 10, 12, 23, 24, 21, 7, 11
,12, 20, 24, 9, 19, 4, 7, 16, 13
,1, 17, 2, 22, 11, 20, 0, 18, 23
,1
},
{
13, 24, 10, 17, 7, 19, 20, 19, 11
,15, 6, 10, 21, 9, 2, 8, 12, 22
,21, 0, 13, 6, 24, 23, 21, 16, 10
,2, 2, 20, 12, 19, 21, 11, 19, 4
,24, 17, 20, 19, 24, 14, 11, 8, 21
,5, 15, 12, 3, 3, 16, 19, 10, 0
,2, 13, 16, 0, 22, 9, 14, 22, 20
,23
},
{
22, 16, 24, 16, 5, 21, 12, 21, 18
,18, 11, 18, 16, 19, 10, 3, 10, 23
,8, 4, 17, 22, 6, 8, 10, 5, 15
,16, 9, 19, 12, 0, 3, 16, 22, 11
,10, 1, 11, 8, 5, 20, 20, 8, 23
,23, 5, 3, 1, 17, 11, 17, 21, 17
,17, 10, 22, 14, 3, 16, 1, 12, 7
,16
},
{
13, 8, 8, 3, 5, 5, 11, 7, 1
,4, 22, 0, 10, 1, 16, 24, 6, 9
,12, 10, 22, 21, 9, 17, 21, 10, 13
,14, 14, 10, 4, 13, 7, 1, 20, 10
,10, 14, 2, 17, 7, 15, 12, 23, 12
,3, 6, 15, 6, 15, 16, 15, 13, 8
,17, 0, 8, 2, 13, 8, 7, 24, 13
,10
},
{
24, 0, 24, 12, 23, 17, 7, 19, 4
,21, 17, 15, 19, 19, 18, 18, 22, 3
,20, 24, 13, 5, 21, 22, 5, 16, 16
,16, 12, 7, 15, 1, 24, 22, 0, 22
,17, 20, 21, 16, 9, 23, 13, 15, 20
,20, 15, 11, 17, 14, 23, 24, 14, 13
,3, 8, 5, 23, 6, 7, 18, 0, 0
,6
},
};

private static final int[][] TABLE_2 = { 
  
{
5, 15, 6, 13, 14, 24, 8, 5, 3
,13, 9, 8, 24, 20, 0, 2, 21, 0
,10, 8, 12, 12, 24, 19, 18, 11, 20
,14, 17, 18, 14, 24, 19, 20, 3, 5
,12, 13, 6, 24, 12, 2, 11, 9, 7
,7, 7, 14, 23, 14, 20, 17, 5, 16
,13, 10, 15, 14, 16, 6, 17, 5, 10
,1
},
{
11, 7, 6, 6, 9, 21, 16, 2, 10
,16, 8, 17, 1, 0, 14, 17, 9, 19
,8, 2, 2, 8, 23, 18, 15, 24, 12
,8, 9, 18, 24, 6, 17, 13, 18, 6
,11, 16, 2, 19, 5, 20, 24, 10, 12
,8, 13, 9, 14, 22, 19, 23, 19, 18
,5, 17, 3, 12, 22, 19, 12, 5, 2
,23
},
{
17, 20, 11, 24, 24, 20, 21, 3, 24
,23, 11, 11, 12, 17, 11, 16, 14, 19
,12, 5, 10, 10, 1, 16, 1, 9, 9
,10, 6, 7, 20, 7, 22, 9, 15, 0
,11, 17, 16, 1, 7, 15, 16, 22, 13
,13, 1, 19, 14, 21, 1, 17, 18, 23
,7, 5, 13, 19, 18, 10, 12, 7, 23
,18
},
{
16, 23, 1, 4, 7, 1, 7, 4, 17
,20, 15, 5, 6, 21, 20, 12, 9, 10
,17, 13, 16, 6, 5, 10, 5, 4, 13
,21, 23, 6, 8, 24, 6, 10, 10, 12
,17, 2, 20, 19, 0, 14, 6, 10, 1
,16, 7, 11, 2, 7, 13, 8, 6, 16
,9, 3, 4, 6, 23, 24, 19, 17, 23
,6
},
{
0, 18, 21, 8, 7, 11, 8, 19, 22
,23, 16, 12, 18, 17, 13, 9, 1, 23
,3, 19, 4, 8, 11, 21, 6, 5, 3
,19, 4, 16, 21, 3, 13, 1, 21, 15
,15, 11, 9, 13, 19, 11, 15, 10, 4
,9, 2, 20, 21, 6, 4, 2, 21, 12
,5, 14, 22, 17, 14, 16, 2, 15, 3
,4
},
{
4, 13, 4, 22, 21, 12, 7, 1, 10
,13, 24, 13, 19, 4, 18, 3, 7, 20
,6, 24, 19, 19, 10, 0, 7, 1, 8
,18, 9, 21, 5, 19, 17, 20, 17, 9
,1, 0, 21, 12, 1, 23, 7, 20, 14
,1, 3, 8, 7, 14, 4, 8, 15, 5
,15, 17, 9, 24, 20, 11, 16, 9, 13
,3
},
{
4, 16, 8, 4, 19, 17, 5, 13, 1
,18, 6, 3, 3, 17, 22, 23, 21, 24
,14, 15, 17, 2, 9, 12, 4, 11, 18
,22, 22, 19, 22, 18, 5, 1, 18, 11
,14, 24, 2, 24, 23, 1, 4, 7, 24
,18, 1, 4, 23, 20, 20, 1, 3, 11
,21, 10, 10, 20, 18, 15, 21, 17, 12
,10
},
{
11, 12, 4, 7, 11, 19, 19, 22, 14
,0, 11, 11, 14, 10, 5, 2, 17, 7
,13, 2, 3, 3, 0, 22, 4, 13, 22
,19, 6, 21, 15, 4, 9, 0, 11, 1
,15, 20, 1, 13, 3, 11, 24, 11, 11
,12, 24, 7, 23, 21, 16, 16, 8, 11
,5, 24, 6, 3, 0, 21, 12, 9, 6
,22
},
};

private static final int[] G = {
0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 11, 0, 0, 0, 1, 10, 4, 7, 0, 4, 4, 5, 1, 11, 0};
  /**
   * Determines the hash code of the given string, which is equal to its
   * index in the key list.
   * Precondition: the given string is within the key list.
   * 
   * @param key
   *   the string for which to calculate a hash
   * @return
   *   the hash code of the given string
   */
  public static int hash(String key) {
    int i, u, v;

    for (u = v = i = 0; i < key.length(); ++i) {
      u = (u + TABLE_1[i % 8][key.charAt(i) % 64])
            % 25;
      v = ((v + TABLE_2[i % 8][key.charAt(i) % 64])
            % 25);
    }

    return (G[u] + G[v]) % 12;
  }

  /*
   * Example main method to test the hash function. Every key should hash
   * to its own index. An error message will be printed if this doesn't
   * hold.
   * 
   * Uncomment to use.
   */
  /*
  public static void main(String[] args) {
    for (int i = 0; i < KEY_LIST.length; ++i) {
      int h = hash(KEY_LIST[i]);
      if (h != i) {
        System.err.printf("Error while hashing \"%s\": expected %d but was %d%n", KEY_LIST[i], i, h);
      }
    }
  }
  */

}
